// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/flutter_openim_sdk_ffi.h`.
///
/// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`.
///
class FlutterOpenimSdkFfiBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  FlutterOpenimSdkFfiBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  FlutterOpenimSdkFfiBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void setPrintCallback(
    PrintCallback callback,
  ) {
    return _setPrintCallback(
      callback,
    );
  }

  late final _setPrintCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(PrintCallback)>>(
          'setPrintCallback');
  late final _setPrintCallback =
      _setPrintCallbackPtr.asFunction<void Function(PrintCallback)>();

  bool ffi_Dart_Dlopen() {
    return _ffi_Dart_Dlopen();
  }

  late final _ffi_Dart_DlopenPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('ffi_Dart_Dlopen');
  late final _ffi_Dart_Dlopen =
      _ffi_Dart_DlopenPtr.asFunction<bool Function()>();

  void ffi_Dart_Port(
    int isolate_send_port,
  ) {
    return _ffi_Dart_Port(
      isolate_send_port,
    );
  }

  late final _ffi_Dart_PortPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Dart_Port_DL)>>(
          'ffi_Dart_Port');
  late final _ffi_Dart_Port =
      _ffi_Dart_PortPtr.asFunction<void Function(int)>();

  int ffi_Dart_InitializeApiDL(
    ffi.Pointer<ffi.Void> data,
  ) {
    return _ffi_Dart_InitializeApiDL(
      data,
    );
  }

  late final _ffi_Dart_InitializeApiDLPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'ffi_Dart_InitializeApiDL');
  late final _ffi_Dart_InitializeApiDL = _ffi_Dart_InitializeApiDLPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Char> ffi_Dart_GetSdkVersion() {
    return _ffi_Dart_GetSdkVersion();
  }

  late final _ffi_Dart_GetSdkVersionPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'ffi_Dart_GetSdkVersion');
  late final _ffi_Dart_GetSdkVersion =
      _ffi_Dart_GetSdkVersionPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  bool ffi_Dart_InitSDK(
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> config,
  ) {
    return _ffi_Dart_InitSDK(
      operationID,
      config,
    );
  }

  late final _ffi_Dart_InitSDKPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('ffi_Dart_InitSDK');
  late final _ffi_Dart_InitSDK = _ffi_Dart_InitSDKPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void ffi_Dart_Login(
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> uid,
    ffi.Pointer<ffi.Char> token,
  ) {
    return _ffi_Dart_Login(
      operationID,
      uid,
      token,
    );
  }

  late final _ffi_Dart_LoginPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('ffi_Dart_Login');
  late final _ffi_Dart_Login = _ffi_Dart_LoginPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  void ffi_Dart_RegisterCallback(
    ffi.Pointer<ffi.Int> listener,
  ) {
    return _ffi_Dart_RegisterCallback(
      listener,
    );
  }

  late final _ffi_Dart_RegisterCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int>)>>(
          'ffi_Dart_RegisterCallback');
  late final _ffi_Dart_RegisterCallback = _ffi_Dart_RegisterCallbackPtr
      .asFunction<void Function(ffi.Pointer<ffi.Int>)>();
}

typedef PrintCallback
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>;

/// ============================================================================
/// IMPORTANT! Never update these signatures without properly updating
/// DART_API_DL_MAJOR_VERSION and DART_API_DL_MINOR_VERSION.
///
/// Verbatim copy of `dart_native_api.h` and `dart_api.h` symbol names and types
/// to trigger compile-time errors if the symbols in those files are updated
/// without updating these.
///
/// Function return and argument types, and typedefs are carbon copied. Structs
/// are typechecked nominally in C/C++, so they are not copied, instead a
/// comment is added to their definition.
typedef Dart_Port_DL = ffi.Int64;
