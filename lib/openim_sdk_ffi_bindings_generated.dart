// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/flutter_openim_sdk_ffi.h`.
///
/// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`.
///
class OpenimSdkFfiBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  OpenimSdkFfiBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  OpenimSdkFfiBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void callOnMethodChannel(
    ffi.Pointer<CGO_OpenIM_Listener> listener,
    int port,
    ffi.Pointer<ffi.Char> methodName,
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Int32> errCode,
    ffi.Pointer<ffi.Char> message,
  ) {
    return _callOnMethodChannel(
      listener,
      port,
      methodName,
      operationID,
      errCode,
      message,
    );
  }

  late final _callOnMethodChannelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<CGO_OpenIM_Listener>,
              Dart_Port_DL,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Char>)>>('callOnMethodChannel');
  late final _callOnMethodChannel = _callOnMethodChannelPtr.asFunction<
      void Function(
          ffi.Pointer<CGO_OpenIM_Listener>,
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Int32>,
          ffi.Pointer<ffi.Char>)>();

  void RegisterCallback(
    ffi.Pointer<CGO_OpenIM_Listener> callback,
    int port,
  ) {
    return _RegisterCallback(
      callback,
      port,
    );
  }

  late final _RegisterCallbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<CGO_OpenIM_Listener>,
              Dart_Port_DL)>>('RegisterCallback');
  late final _RegisterCallback = _RegisterCallbackPtr.asFunction<
      void Function(ffi.Pointer<CGO_OpenIM_Listener>, int)>();

  ffi.Pointer<ffi.Char> GetSdkVersion() {
    return _GetSdkVersion();
  }

  late final _GetSdkVersionPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'GetSdkVersion');
  late final _GetSdkVersion =
      _GetSdkVersionPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  bool InitSDK(
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> config,
  ) {
    return _InitSDK(
      operationID,
      config,
    );
  }

  late final _InitSDKPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('InitSDK');
  late final _InitSDK = _InitSDKPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void Login(
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> userID,
    ffi.Pointer<ffi.Char> token,
  ) {
    return _Login(
      operationID,
      userID,
      token,
    );
  }

  late final _LoginPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('Login');
  late final _Login = _LoginPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  void GetUsersInfo(
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Char> userIDList,
  ) {
    return _GetUsersInfo(
      operationID,
      userIDList,
    );
  }

  late final _GetUsersInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('GetUsersInfo');
  late final _GetUsersInfo = _GetUsersInfoPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void GetSelfUserInfo(
    ffi.Pointer<ffi.Char> operationID,
  ) {
    return _GetSelfUserInfo(
      operationID,
    );
  }

  late final _GetSelfUserInfoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'GetSelfUserInfo');
  late final _GetSelfUserInfo =
      _GetSelfUserInfoPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  void GetAllConversationList(
    ffi.Pointer<ffi.Char> operationID,
  ) {
    return _GetAllConversationList(
      operationID,
    );
  }

  late final _GetAllConversationListPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'GetAllConversationList');
  late final _GetAllConversationList = _GetAllConversationListPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>)>();

  void GetConversationListSplit(
    ffi.Pointer<ffi.Char> operationID,
    ffi.Pointer<ffi.Int32> offset,
    ffi.Pointer<ffi.Int32> count,
  ) {
    return _GetConversationListSplit(
      operationID,
      offset,
      count,
    );
  }

  late final _GetConversationListSplitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>)>>('GetConversationListSplit');
  late final _GetConversationListSplit =
      _GetConversationListSplitPtr.asFunction<
          void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>)>();
}

final class _GoString_ extends ffi.Struct {
  external ffi.Pointer<ffi.Char> p;

  @ptrdiff_t()
  external int n;
}

typedef ptrdiff_t = __darwin_ptrdiff_t;
typedef __darwin_ptrdiff_t = ffi.Long;

final class CGO_OpenIM_Listener extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              Dart_Port_DL,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Char>)>> onMethodChannel;
}

/// ============================================================================
/// IMPORTANT! Never update these signatures without properly updating
/// DART_API_DL_MAJOR_VERSION and DART_API_DL_MINOR_VERSION.
///
/// Verbatim copy of `dart_native_api.h` and `dart_api.h` symbol names and types
/// to trigger compile-time errors if the symbols in those files are updated
/// without updating these.
///
/// Function return and argument types, and typedefs are carbon copied. Structs
/// are typechecked nominally in C/C++, so they are not copied, instead a
/// comment is added to their definition.
typedef Dart_Port_DL = ffi.Int64;

final class GoInterface extends ffi.Struct {
  external ffi.Pointer<ffi.Void> t;

  external ffi.Pointer<ffi.Void> v;
}

final class GoSlice extends ffi.Struct {
  external ffi.Pointer<ffi.Void> data;

  @GoInt()
  external int len;

  @GoInt()
  external int cap;
}

typedef GoInt = GoInt64;
typedef GoInt64 = ffi.LongLong;
